# TO BE USED IN PRODUCTION
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/json,application/xml,application/javascript
server.http2.enabled=true
server.tomcat.max-keep-alive-requests=120
# milliseconds
server.tomcat.keep-alive-timeout=80000

spring.application.name=themus
app.env=prod
app.domain=${SERVER_HOST}
app.client-domain=${CLIENT_HOST}

# TODO: change to the actual URL
python.service.url=${PYTHON_SERVICE_URL}

logging.level.org.springframework.web: DEBUG
logging.level.com.delphi.delphi.filters.JwtAuthFilter: DEBUG
logging.level.com.delphi.delphi.filters.SecurityFilter: DEBUG
logging.file.name=themus.log
# server.port=8080

jwt.secret=${JWT_SECRET}
jwt.access.expiration=${JWT_ACCESS_EXPIRATION}    
jwt.refresh.expiration=${JWT_REFRESH_EXPIRATION}

# spring.datasource.url=${DB_CONNECTION}
# spring.datasource.username=${DB_USERNAME}
# spring.datasource.password=${DB_PASSWORD}

spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USERNAME}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.default_schema=themus
spring.flyway.enabled=false
spring.flyway.default-schema=themus
spring.flyway.schemas=themus
spring.flyway.create-schemas=false
# Baseline to avoid errors when a non-empty 'public' schema exists without a Flyway history table
spring.flyway.baseline-on-migrate=true

# DB configuration. TODO: adjust for production

# DB connection pool configuration - default is 10
spring.datasource.hikari.maximum-pool-size=15
# Repeatable read transaction isolation level
spring.datasource.hikari.transaction-isolation=TRANSACTION_REPEATABLE_READ

# 5 minutes
spring.mvc.async.request-timeout=300000
# Serializable transaction isolation level - prevents dirty reads, non-repeatable reads, and phantom reads
# spring.datasource.tomcat.default-transaction-isolation=4

# spring.datasource.tomcat.max-active=10
# spring.datasource.tomcat.max-age=10000
# spring.datasource.tomcat.max-idle=10
# spring.datasource.tomcat.max-wait=1000
# spring.datasource.tomcat.min-idle=0
# spring.datasource.tomcat.min-evictable-idle-time-millis=10000
# spring.datasource.tomcat.time-between-eviction-runs-millis=10000

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.security.oauth2.client.registration.github.client-id=${GITHUB_OAUTH_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_OAUTH_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=repo,user

spring.data.jpa.repositories.enabled=true

#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true
#logging.level.org.hibernate.SQL=NO
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

themus.github.token=${THEMUS_GITHUB_TOKEN}
themus.github.username=${GITHUB_USERNAME}
themus.github.app.name=${GITHUB_APP_NAME}
github.app.id=${GITHUB_APP_ID}
github.app.private-key=${GITHUB_APP_PRIVATE_KEY}
github.app.client-id=${GITHUB_APP_CLIENT_ID}
github.app.client-secret=${GITHUB_APP_CLIENT_SECRET}
github.app.webhook-secret=${GITHUB_APP_WEBHOOK_SECRET}

# Spring AI Configuration for OpenRouter
# IMPORTANT: Replace 'YOUR_OPENROUTER_API_KEY_HERE' with your actual OpenRouter API key.
spring.ai.openai.api-key=${OPENROUTER_API_KEY}

# Point Spring AI to the OpenRouter base URL
spring.ai.openai.base-url=https://openrouter.ai/api

# Default chat model to use via OpenRouter
# Get model IDs from the OpenRouter website (e.g., "anthropic/claude-3-sonnet", "google/gemini-pro")
spring.ai.openai.chat.options.model=anthropic/claude-sonnet-4

spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.database=${REDIS_DATABASE}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.lettuce.pool.max-active=100
spring.data.redis.lettuce.pool.max-wait=1000
spring.data.redis.lettuce.pool.max-idle=50
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.shutdown-timeout=0
spring.data.redis.repositories.enabled=false
# Cache configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=1800000
spring.cache.redis.cache-null-values=false
spring.cache.redis.use-key-prefix=true
spring.cache.redis.key-prefix=${CACHE_KEY_PREFIX}

stripe.api.key=${STRIPE_API_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}
stripe.success.url=${STRIPE_SUCCESS_URL}

resend.api.key=${RESEND_API_KEY}

spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}
spring.rabbitmq.password=${RABBITMQ_DEFAULT_PASSWORD}
spring.rabbitmq.username=${RABBITMQ_DEFAULT_USER}

# Connection timeout and retry settings
spring.rabbitmq.connection-timeout=60000
spring.rabbitmq.requested-heartbeat=60
spring.rabbitmq.publisher-confirm-type=correlated
spring.rabbitmq.publisher-returns=true

# Template settings for better reliability
spring.rabbitmq.template.mandatory=true
spring.rabbitmq.template.retry.enabled=true
spring.rabbitmq.template.retry.initial-interval=1000
spring.rabbitmq.template.retry.max-attempts=3
spring.rabbitmq.template.retry.max-interval=10000

candidate.invitation.topic.exchange.name=${CANDIDATE_INVITATION_TOPIC_EXCHANGE_NAME}
candidate.invitation.topic.queue.name=${CANDIDATE_INVITATION_TOPIC_QUEUE_NAME}
candidate.invitation.routing.key=${CANDIDATE_INVITATION_ROUTING_KEY}

# spring.rabbitmq.stomp.port=61613
# spring.rabbitmq.stomp.enabled=true

# grpc.server.host=${GRPC_HOST}
# grpc.server.port=${GRPC_PORT}

## Hibernate properties
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.open-in-view=false

# spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH_CLIENT_ID}
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.scope=email,profile

# spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/dashboard
# spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8080/dashboard

# Kafka Configuration
# spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
# spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID}
# spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.consumer.properties.spring.json.trusted.packages=*

resend.default.from=Themus <noreply@notifications.themus.dev>

encryption.secret-key=${ENCRYPTION_SECRET_KEY}
# encryption.salt=1234567890

# File Upload Configuration
# Maximum file size (500MB)
spring.servlet.multipart.max-file-size=500MB
# Maximum request size (500MB)
spring.servlet.multipart.max-request-size=500MB
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# File size threshold for disk storage (2MB)
spring.servlet.multipart.file-size-threshold=2MB
# Location for temporary files
spring.servlet.multipart.location=/tmp